[
  {
    "id": 0,
    "name": "scats",
    "language": "TypeScript",
    "url": "https://github.com/chrismichaelps/scats",
    "description": "A comprehensive TypeScript library bringing Scala's powerful functional programming paradigms to JavaScript/TypeScript, featuring immutable collections, monads, pattern matching, and more.",
    "features": [
      "Algebraic Data Types (ADTs) via tagged unions",
      "Pattern matching inspired by Scala 3",
      "Immutable collections (List, Map, Set)",
      "Lazy evaluation with LazyList",
      "Efficient indexed sequences with Vector",
      "Option, Either, Try containers",
      "For-comprehensions for monadic composition",
      "Typeclasses with extension methods",
      "Tuples with Tuple2 and Tuple3 implementations",
      "Ordering for comparison operations",
      "Resource management with Using pattern",
      "Monads including State and Writer"
    ]
  },
  {
    "id": 1,
    "name": "VEffect",
    "language": "TypeScript",
    "url": "https://github.com/chrismichaelps/veffect",
    "description": "VEffect Validation is a powerful TypeScript validation library built on the robust foundation of Effect, combining exceptional type safety, high performance, and developer experience. Taking inspiration from Effect's functional principles.",
    "features": [
      "üîç Type-Safe - Full TypeScript integration with inferred types",
      "‚ö° High Performance - Built on a functional core for speed and reliability",
      "üõ°Ô∏è Comprehensive Validation - Rich set of validators for common use cases",
      "üß© Composable - Build complex schemas from simple building blocks",
      "üîÑ Functional - Clean API that encourages immutable operations",
      "üí¨ Detailed Errors - Helpful error messages with path tracking",
      "üîÄ Pattern Matching - Dynamic schema selection based on input values",
      "‚öñÔ∏è Discriminated Unions - First-class support for TypeScript's discriminated unions",
      "üìö Schema Registry - Store and manage schemas with metadata",
      "üß¨ Interface Schema - Powerful schema with explicit key optionality",
      "üîÑ Recursive Types - True type-safe recursive structures without type assertions",
      "üîÑ Key vs Value Optionality - Clear distinction between optional keys and optional values"
    ]
  },
  {
    "id": 2,
    "name": "QuantumMatcher",
    "language": "TypeScript",
    "url": "https://github.com/chrismichaelps/quantummatcher",
    "description": "QuantumMatcher library is a fuzzy matching algorithm that leverages bitwise operations to efficiently find approximate matches within a collection of items.",
    "features": [
      "Fuzzy Matching: Efficiently finds approximate matches in a collection",
      "Customizable Keys: Specify which keys of the items to match against",
      "Match Quality Calculation: Considers match ratio, contiguity, position, and partial matches",
      "Sorted Results: Returns results sorted by match score"
    ]
  },
  {
    "id": 3,
    "name": "FASTA-to-FST",
    "language": "C++",
    "url": "https://github.com/chrismichaelps/fasta-to-fst",
    "description": "This project demonstrates how to convert FASTA files to Finite State Transducers (FSTs). It provides a simple workflow for building the project, converting a FASTA file to an FST, and visualizing the result.",
    "features": [
      "FASTA file parsing",
      "Efficient conversion to FST format",
      "Visualization tools",
      "Command-line interface",
      "Bioinformatics utilities"
    ]
  }
]